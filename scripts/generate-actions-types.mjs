import { compileFromFile } from 'json-schema-to-typescript';
import { writeFileSync, existsSync, mkdirSync } from 'fs';
import { join } from 'path';

const rootDir = process.cwd();
const schemaPath = join(rootDir, '.oursynth', 'actions.schema.json');
const typesDir = join(rootDir, 'types'); // Assuming a 'types' directory at root for generated types
const outputPath = join(typesDir, 'actions.d.ts');

const log = (message) => console.log(`[Type Generation] ${message}`);
const error = (message) => console.error(`[Type Generation Error] ${message}`);

async function generateActionsTypes() {
  log('Starting actions.json type generation...');

  // Ensure types directory exists
  if (!existsSync(typesDir)) {
    mkdirSync(typesDir, { recursive: true });
    log(`Created types directory: ${typesDir}`);
  }

  try {
    const ts = await compileFromFile(schemaPath, {
      cwd: rootDir, // Important for resolving $ref if any
      bannerComment: '/* eslint-disable */\n/**\n * This file was automatically generated by json-schema-to-typescript.\n * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n * and run "pnpm generate:actions-types" to regenerate this file.\n */',
    });
    writeFileSync(outputPath, ts, 'utf8');
    log(`TypeScript types generated successfully at: ${outputPath}`);
    process.exit(0);
  } catch (e) {
    error(`An error occurred during type generation: ${e.message}`);
    process.exit(1);
  }
}

generateActionsTypes();
